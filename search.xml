<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ボカロの夏</title>
    <url>/2021/09/26/summer-of-bokaro/</url>
    <content><![CDATA[<p>人生第一篇术曲相关杂谈。没错，新一代<a href="https://zh.wikipedia.org/zh-cn/%E6%88%91%E6%98%AF%E7%8C%AB">谜亭先生</a>开始音乐鉴赏啦。</p>
<span id="more"></span>

<blockquote>
<p>花和麦芽糖算是我的拿不拿入坑曲。当时的感觉是，突然遇到了一直在术圈没找到的某种风格。</p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=400 height=86 src="//music.163.com/outchain/player?type=2&id=33367346&auto=0&height=66"></iframe>

<blockquote>
<p>跳到辞音，有了suis的拿不再是那个<del>和裸足少女有迷之故事的</del>男人了。</p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=400 height=86 src="//music.163.com/outchain/player?type=2&id=1357953768&auto=0&height=66"></iframe>

<blockquote>
<p>猫猫好耶！</p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=400 height=86 src="//music.163.com/outchain/player?type=2&id=1442466883&auto=0&height=66"></iframe>

<blockquote>
<p>某些拍好了婚纱照的人还被大家当预科生</p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=420 height=86 src="//music.163.com/outchain/player?type=2&id=31830623&auto=0&height=66"></iframe>

<blockquote>
<p>事实是开头的夏之施法来自另一个专辑</p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=420 height=86 src="//music.163.com/outchain/player?type=2&id=503853905&auto=0&height=66"></iframe>

<h1 id="夏是什么"><a href="#夏是什么" class="headerlink" title="夏是什么"></a>夏是什么</h1><p>这个问题问得好。知人论世，去萌娘了，告辞（</p>
<p><strong>第一大坑已出现</strong></p>
]]></content>
      <categories>
        <category>随便写点</category>
        <category>一窍不通</category>
      </categories>
      <tags>
        <tag>n-buna</tag>
        <tag>Orangestar</tag>
        <tag>Luna*</tag>
        <tag>ボカロ以外</tag>
        <tag>夏</tag>
      </tags>
  </entry>
  <entry>
    <title>async/await 到底该何时用？</title>
    <url>/2021/09/26/when-async-await/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>众所周知，JabaScript 的异步 API 已经迭代三代了。<code>async/await</code> 语法糖它是如此地香<del>，以至于 Dart 改过去 <code>Promise</code> 都变 <code>Future</code> 了它名字原封不动</del>。</p>
<span id="more"></span>

<h1 id="我的例子"><a href="#我的例子" class="headerlink" title="我的例子"></a>我的例子</h1><p>一个场景：我需要批量地向一个 RESTful API（这里是 Mastodon Backend）发 POST，每次的具体内容都作为一个 iterable 的元素准备好了。</p>
<p>首先发一个 POST 请求很简单：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">postStatus</span>(<span class="params">message, doReply, doReplySelf</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> content = (<span class="keyword">await</span> getMentionPrefix()) + message;</span><br><span class="line">  <span class="keyword">await</span> agent</span><br><span class="line">    .post(<span class="string">&quot;/api/v1/statuses&quot;</span>)</span><br><span class="line">    .set(<span class="string">&quot;Authorization&quot;</span>, mastodonToken)</span><br><span class="line">    .set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;multipart/form-data&quot;</span>)</span><br><span class="line">    .field(<span class="string">&quot;status&quot;</span>, content)</span><br><span class="line">    .field(</span><br><span class="line">      <span class="string">&quot;in_reply_to_id&quot;</span>,</span><br><span class="line">      doReply ? queryStatusId : doReplySelf ? selfStatusId : <span class="string">&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      selfStatusId = <span class="built_in">JSON</span>.parse(res.text).id;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;-----postStatus-----\n&quot;</span> + res.text + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(<span class="string">&quot;postStatus() failed with error: &quot;</span> + err));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那假如因为 Mastodon 的500字限制，要把一篇文本分成10次分别发送呢？动动灵活的小手指，我们可以复用 <code>postStatus()</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">postSlicedStatus</span>(<span class="params">message, doReply, doReplySelf</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> sliceSum = <span class="built_in">Math</span>.ceil(message.length / <span class="number">450</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; message.length; i += <span class="number">450</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> postStatus(</span><br><span class="line">      message.substring(i, i + <span class="number">450</span>) +</span><br><span class="line">        <span class="string">` (<span class="subst">$&#123;<span class="built_in">Math</span>.floor(i <span class="regexp">/ 450) + 1&#125;/</span>$&#123;sliceSum&#125;)<span class="string">`,</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      doReply,</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      doReplySelf</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    );</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br></pre></td></tr></table></figure>

<p>（Mastodon 的 status content 发过去 validate 的时候貌似 XML tags 也算，所以这里取的是450个字符。）</p>
<p>我们不是精神小伙，无法每次遇到问题都敲10个<code>.then()</code>回调，所以目前我觉得 <code>await</code> 来搭配迭代操作是很靠谱的。</p>
<h1 id="Estel对这篇的自评：逻辑混乱，费曼表示看不懂"><a href="#Estel对这篇的自评：逻辑混乱，费曼表示看不懂" class="headerlink" title="Estel对这篇的自评：逻辑混乱，费曼表示看不懂"></a>Estel对这篇的自评：逻辑混乱，费曼表示看不懂</h1>]]></content>
      <categories>
        <category>一本正经的研究</category>
        <category>打代码</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>异步编程</tag>
        <tag>Teal Bot</tag>
        <tag>Mastodon</tag>
      </tags>
  </entry>
</search>
